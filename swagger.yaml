openapi: 3.0.0
info:
  title: Al-HaJ Coffee API
  version: 1.0.0
  description: |
    Welcome to the Al-HaJ Coffee API documentation.

    **Example IDs:**
    - ðŸ“¦ Product Type ID: `6875895b9a9ee1cded9b724c` â€“ used when admin wants to create a product under specific type (e.g., Beans, Ground, Equipment).
    - ðŸ›’ Product ID: `68758a419a9ee1cded9b724f` â€“ used when a user wants to place an order including a product.

servers:
  - url: https://alhaj-coffee-back-end.up.railway.app

paths:
  /api/auth/register:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        "201":
          description: User registered
        "400":
          description: User already exists

  /api/auth/login:
    post:
      summary: Login user and return token
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Login successful
        "400":
          description: Invalid credentials

  /api/products:
    post:
      summary: Admin â€“ Create a new product
      tags: [Admin]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                desc:
                  type: string
                type:
                  type: string
                  example: 6875895b9a9ee1cded9b724c
                price:
                  type: number
                weight:
                  type: string
                roast:
                  type: string
                image:
                  type: string
                  format: binary
      responses:
        "201":
          description: Product created

    get:
      summary: Get all products
      tags: [Public]
      responses:
        "200":
          description: List of products

  /api/products/{id}:
    get:
      summary: Get product by ID
      tags: [Public]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Product found
        "404":
          description: Product not found

    put:
      summary: Admin â€“ Update product
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                desc:
                  type: string
                type:
                  type: string
                price:
                  type: number
                weight:
                  type: string
                roast:
                  type: string
      responses:
        "200":
          description: Product updated

    delete:
      summary: Admin â€“ Delete product
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Product deleted

  /api/orders:
    post:
      summary: User â€“ Place a new order
      tags: [User]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                products:
                  type: array
                  items:
                    type: object
                    properties:
                      product:
                        type: string
                        example: 68758a419a9ee1cded9b724f
                      quantity:
                        type: number
                shippingInfo:
                  type: object
                  properties:
                    name:
                      type: string
                    address:
                      type: string
                    phone:
                      type: string
      responses:
        "201":
          description: Order placed

    get:
      summary: Admin â€“ Get all orders
      tags: [Admin]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of orders

  /api/orders/user:
    get:
      summary: User â€“ Get user orders
      tags: [User]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User order list

  /api/orders/{id}/status:
    put:
      summary: Admin â€“ Change order status
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [pending, processing, shipped, delivered]
      responses:
        "200":
          description: Status updated

  /api/users:
    get:
      summary: Admin â€“ Get all users
      tags: [Admin]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of users

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
